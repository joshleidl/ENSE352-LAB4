


ARM Macro Assembler    Page 1 


    1 00000000         ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                       ;;;;;;;;
    2 00000000         ;;; Project: Lab 4 - Sorting arrays of characters in asc
                       ending 
    3 00000000         ;;;          order using Merge sort algorithm
    4 00000000         ;;; File: 
    5 00000000         ;;; Class: lab4_sort.s
    6 00000000         ;;; Date: 
    7 00000000         ;;; Programmer: 
    8 00000000         ;;; Description:
    9 00000000         
   10 00000000         
   11 00000000         ; Directives
   12 00000000                 PRESERVE8
   13 00000000                 THUMB
   14 00000000         
   15 00000000         ;;; Equates
   16 00000000 20001000 
                       end_of_stack
                               equ              0x20001000  ;Allocating 4kB of 
                                                            memory for the stac
                                                            k
   17 00000000 20000000 
                       RAM_START
                               equ              0x20000000
   18 00000000         
   19 00000000         ; Vector Table Mapped to Address 0 at Reset, Linker requ
                       ires __Vectors to be exported
   20 00000000         
   21 00000000                 AREA             RESET, DATA, READONLY
   22 00000000                 EXPORT           __Vectors
   23 00000000         ;The DCD directive allocates one or more words of memory
                       , aligned on four-byte boundaries, 
   24 00000000         ;and defines the initial runtime contents of the memory.
                       
   25 00000000         
   26 00000000         
   27 00000000         __Vectors
   28 00000000 20002000        DCD              0x20002000  ; stack pointer val
                                                            ue when stack is em
                                                            pty
   29 00000004 00000000        DCD              Reset_Handler ; reset vector
   30 00000008         
   31 00000008                 ALIGN
   32 00000008         
   33 00000008         ;My  program,  Linker requires Reset_Handler and it must
                        be exported
   34 00000008         
   35 00000008                 AREA             MYCODE, CODE, READONLY
   36 00000000                 ENTRY
   37 00000000                 EXPORT           Reset_Handler
   38 00000000         
   39 00000000         
   40 00000000         
   41 00000000         
   42 00000000         Reset_Handler
                               PROC
   43 00000000         ;; Copy the string of characters from flash to RAM buffe
                       r so it 



ARM Macro Assembler    Page 2 


   44 00000000         ;; can be sorted  - Student to do  
   45 00000000         
   46 00000000         
   47 00000000 F7FF FFFE       bl               byte_copy   ;Calling subroutine
                                                             to sort the charac
                                                            ters in the buffer
   48 00000004         
   49 00000004         
   50 00000004 F7FF FFFE       bl               sort
   51 00000008         
   52 00000008         
   53 00000008         
   54 00000008         ;; we are finished
   55 00000008 E7FE    done    b                done        ; finished mainline
                                                             code.
   56 0000000A                 ENDP
   57 0000000A         
   58 0000000A         ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                       ;;;;;;;;
   59 0000000A         string1
   60 0000000A 41 42 45 
              46 5A 41 
              43 44 47 
              4C               dcb              "ABEFZACDGL"
   61 00000014 0000000A 
                       string1size
                               equ              . - string1
   62 00000014         
   63 00000014                 align
   64 00000014         size1
   65 00000014 0000000A        dcd              string1size
   66 00000018         
   67 00000018         ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                       ;;;;
   68 00000018         ;;; ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                       ;;;;;;;
   69 00000018         ;;; Author:
   70 00000018         ;;; Sort an array of characters in ascending order using
                        the 
   71 00000018         ;;; algorithm described in the lab handout
   72 00000018         ;;; 
   73 00000018         ;;; Require:
   74 00000018         ;;; R1: ptr to buffer in RAM containing the input string
                        (string_buffer)
   75 00000018         ;;; R2: ptr to auxiliary buffer in RAM used by subroutin
                       e "merge" (aux_buffer)
   76 00000018         ;;; R3: size of the string (contained in [size1] )
   77 00000018         ;;; 
   78 00000018         ;;; Promise: Returns 1 in error register R10 if there wa
                       s an error, else 
   79 00000018         ;;; R10 is 0 and the buffer in RAM contains the sorted s
                       tring of characters
   80 00000018         ;;; Subroutine must not modify any other register.
   81 00000018         ;;; 
   82 00000018                 ALIGN
   83 00000018         sort    PROC
   84 00000018         
   85 00000018         ;; include here the body of your routine
   86 00000018         



ARM Macro Assembler    Page 3 


   87 00000018 4770            bx               lr
   88 0000001A         
   89 0000001A                 ENDP
   90 0000001A         
   91 0000001A         
   92 0000001A         
   93 0000001A         ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                       ;;;;;;;;
   94 0000001A         ;;; copy an array of bytes from source ptr R1 to dest pt
                       r R2.  R3
   95 0000001A         ;;; contains the number of bytes to copy.
   96 0000001A         ;;; Require:
   97 0000001A         ;;; The destination had better be somewhere in RAM, but 
                       that's the
   98 0000001A         ;;; caller's responsibility.  As is the job to ensure th
                       e source and 
   99 0000001A         ;;; dest arrays don't overlap.
  100 0000001A         ;;;
  101 0000001A         ;;; Promise: No registers are modified.  The destination
                        buffer is
  102 0000001A         ;;;          modified.
  103 0000001A         ;;; Author: Prof. Karim Naqvi (Oct 2013)
  104 0000001A 00 00           ALIGN
  105 0000001C         byte_copy
                               PROC
  106 0000001C B41E            push             {r1,r2,r3,r4}
  107 0000001E         
  108 0000001E F04F 0500       mov              r5, #0
  109 00000022         loop
  110 00000022 780C            ldrb             r4, [r1]
  111 00000024 7014            strb             r4, [r2]
  112 00000026         
  113 00000026 F101 0101       add              r1,#1
  114 0000002A F102 0201       add              r2,#1
  115 0000002E F105 0501       add              r5,#1
  116 00000032 42AB            cmp              r3,r5
  117 00000034 D1F5            bne              loop
  118 00000036         
  119 00000036 BC1E            pop              {r1,r2,r3,r4}
  120 00000038 4770            bx               lr
  121 0000003A                 ENDP
  122 0000003A         
  123 0000003A         
  124 0000003A         ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                       ;;;;
  125 0000003A         ;;; Author: Diego Castro (Nov 2013)
  126 0000003A         ;;; Merges two sorted sublists (sublist1 and sublist2) t
                       hat 
  127 0000003A         ;;; contains the ASCII code of characters. Resulting arr
                       ay 
  128 0000003A         ;;; combines the characters of both sublists and it is s
                       orted in ascending order
  129 0000003A         ;;; The subroutine will overwrite the original contents 
                       of both sublists
  130 0000003A         ;;;
  131 0000003A         ;;; Require: 
  132 0000003A         ;;;  R1: pointer to an auxiliary buffer
  133 0000003A         ;;;  R2: pointer to sublist1
  134 0000003A         ;;;  R4: pointer to sublist2



ARM Macro Assembler    Page 4 


  135 0000003A         ;;;   R6: size of sublist2
  136 0000003A         ;;;  R5: size of sublist1
  137 0000003A         ;;; Promise: Sublist1 and sublist2 are adjacent buffers 
                       in memory 
  138 0000003A         ;;; (i.e. first memory address of sublist2 is located 
  139 0000003A         ;;; right after last memory address of sublist1). Both s
                       ublists will be overwritten  
  140 0000003A         ;;; with the sorted array after merging. 
  141 0000003A         ;;; If stack overflow occurs, it returns 1 in error regi
                       ster R10 else r10 is zero. 
  142 0000003A         ;;; Subroutine does not modify any other register.
  143 0000003A         ;;; Example: 
  144 0000003A         ;;;            sublist1  |  Sublist2
  145 0000003A         ;;;                  degz|fht
  146 0000003A         ;;;
  147 0000003A         ;;;            sorted array
  148 0000003A         ;;;                  defghtz
  149 0000003A         ;;; Note: this function needs at least 9 words of free s
                       pace in the stack
  150 0000003A 00 00           ALIGN
  151 0000003C         merge   PROC
  152 0000003C         
  153 0000003C         ;;;checking if there is enough space in stack
  154 0000003C F8DF A094       ldr              r10,=end_of_stack
  155 00000040 EBBD 0A0A       subs             r10,sp,r10  ;R10 contains numbe
                                                            r of bytes availabl
                                                            e in stack   
  156 00000044 F1BA 0F24       cmp              r10,#36     ;this subroutine re
                                                            quires at least 9 w
                                                            ords (36 bytes) of 
                                                            free space in the s
                                                            tack 
  157 00000048 DC02            bgt              no_stack_overflow
  158 0000004A F04F 0A01       mov              r10,#1      ;not enough space i
                                                            n stack for this pr
                                                            ocedure
  159 0000004E 4770            bx               lr
  160 00000050         
  161 00000050         
  162 00000050         no_stack_overflow
  163 00000050 F04F 0A00       mov              r10,#0
  164 00000054 B508            push             {r3,lr}
  165 00000056 E92D 01F6       push             {r1,r2,r4,r5,r6,r7,r8}
  166 0000005A         
  167 0000005A         
  168 0000005A B915    check   cbnz             r5,load_sub1 ;when r5 is 0, we 
                                                            are done checking s
                                                            ublist 1
  169 0000005C F04F 078F       mov              r7,#0x8F    ;done with sublist 
                                                            1, loading high val
                                                            ue in R7
  170 00000060 E004            b                load_sub2
  171 00000062         load_sub1
  172 00000062 7817            ldrb             r7,[r2]     ;R7 contains curren
                                                            t ASCII code of cha
                                                            racter in sublist1
  173 00000064 B916            cbnz             r6,load_sub2
  174 00000066 F04F 088F       mov              r8,#0x8F    ;done with sublist 
                                                            2, loading high val



ARM Macro Assembler    Page 5 


                                                            ue in R8
  175 0000006A E001            b                compare
  176 0000006C         load_sub2
  177 0000006C F894 8000       ldrb             r8,[r4]     ;R8 contains curren
                                                            t ASCII code of cha
                                                            racter in sublist2
  178 00000070         
  179 00000070 4547    compare cmp              r7,r8
  180 00000072 D113            bne              charac_diff
  181 00000074 700F            strb             r7,[r1]     ;both characters ar
                                                            e equal, we copy bo
                                                            th to the aux buffe
                                                            r;
  182 00000076 F101 0101       add              r1,#1
  183 0000007A F881 8000       strb             r8,[r1]
  184 0000007E F101 0101       add              r1,#1
  185 00000082         ;;;Updating indexes
  186 00000082 B115            cbz              r5,cont_sub2 ;index for sublist
                                                             1 will be zero whe
                                                            n we are done inspe
                                                            cting that sublist
  187 00000084 3D01            subs             r5,#1
  188 00000086 F102 0201       add              r2,#1
  189 0000008A B116    cont_sub2
                               cbz              r6,check_if_done ;index for sub
                                                            list 2 will be zero
                                                             when we are done i
                                                            nspecting that subl
                                                            ist
  190 0000008C 3E01            subs             r6,#1
  191 0000008E F104 0401       add              r4,#1
  192 00000092         check_if_done
  193 00000092 42B5            cmp              r5,r6
  194 00000094 D1E1            bne              check
  195 00000096 2D00            cmp              r5,#0       ;both indexes are z
                                                            ero, then we are do
                                                            ne
  196 00000098 D014            beq              finish
  197 0000009A E7DE            b                check
  198 0000009C         
  199 0000009C         charac_diff                          ;;;Only copy to aux
                                                             buffer the charect
                                                            er with smallest co
                                                            de, update its corr
                                                            esponding index 
  200 0000009C DC08            bgt              reverse_order
  201 0000009E 700F            strb             r7,[r1]     ;character in subli
                                                            st1 in less than th
                                                            e code of character
                                                             in sublist2
  202 000000A0 F101 0101       add              r1,#1
  203 000000A4 2D00            cmp              r5,#0
  204 000000A6 D0F4            beq              check_if_done ;index for sublis
                                                            t 1 will be zero wh
                                                            en we are done insp
                                                            ecting that sublist
                                                            
  205 000000A8 3D01            subs             r5,#1
  206 000000AA F102 0201       add              r2,#1



ARM Macro Assembler    Page 6 


  207 000000AE E7F0            b                check_if_done
  208 000000B0         reverse_order
  209 000000B0 F881 8000       strb             r8,[r1]     ;character in subli
                                                            st2 in less than ch
                                                            aracter in sublist1
                                                            .
  210 000000B4 F101 0101       add              r1,#1
  211 000000B8 2E00            cmp              r6,#0
  212 000000BA D0EA            beq              check_if_done ;index for sublis
                                                            t 1 will be zero wh
                                                            en we are done insp
                                                            ecting that sublist
                                                            
  213 000000BC 3E01            subs             r6,#1
  214 000000BE F104 0401       add              r4,#1
  215 000000C2 E7E6            b                check_if_done
  216 000000C4         
  217 000000C4 E8BD 01F6 
                       finish  pop              {r1,r2,r4,r5,r6,r7,r8}
  218 000000C8         ;r1 contains now the memory address of source buffer ...
                        in this case aux_buffer
  219 000000C8         ;r2 constains now vthe memory address of destination buf
                       fer ... in this case sublist1
  220 000000C8 EB05 0306       add              r3,r5,r6    ;size of sorted str
                                                            ing is the addition
                                                            g of the size of bo
                                                            th sublists
  221 000000CC         
  222 000000CC F7FF FFFE       bl               byte_copy   ;;;copy aux buffer 
                                                            to input buffer 
  223 000000D0         
  224 000000D0 BD08            pop              {r3,pc}
  225 000000D2                 ENDP
  226 000000D2         
  227 000000D2         ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                       ;;;;
  228 000000D2         ;;; End of assembly file
  229 000000D2 00 00           align
  230 000000D4                 end
              20001000 
Command Line: --debug --xref --diag_suppress=9931 --cpu=Cortex-M3 --apcs=interw
ork --depend=.\objects\lab4.d -o.\objects\lab4.o -IC:\Keil_v5\ARM\RV31\INC -IC:
\Keil_v5\ARM\CMSIS\Include -IC:\Keil_v5\ARM\Inc\ST\STM32F10x --predefine="__UVI
SION_VERSION SETA 515" --list=.\listings\lab4.lst lab4.s



ARM Macro Assembler    Page 1 Alphabetic symbol ordering
Relocatable symbols

RESET 00000000

Symbol: RESET
   Definitions
      At line 21 in file lab4.s
   Uses
      None
Comment: RESET unused
__Vectors 00000000

Symbol: __Vectors
   Definitions
      At line 27 in file lab4.s
   Uses
      At line 22 in file lab4.s
Comment: __Vectors used once
2 symbols



ARM Macro Assembler    Page 1 Alphabetic symbol ordering
Relocatable symbols

MYCODE 00000000

Symbol: MYCODE
   Definitions
      At line 35 in file lab4.s
   Uses
      None
Comment: MYCODE unused
Reset_Handler 00000000

Symbol: Reset_Handler
   Definitions
      At line 42 in file lab4.s
   Uses
      At line 29 in file lab4.s
      At line 37 in file lab4.s

byte_copy 0000001C

Symbol: byte_copy
   Definitions
      At line 105 in file lab4.s
   Uses
      At line 47 in file lab4.s
      At line 222 in file lab4.s

charac_diff 0000009C

Symbol: charac_diff
   Definitions
      At line 199 in file lab4.s
   Uses
      At line 180 in file lab4.s
Comment: charac_diff used once
check 0000005A

Symbol: check
   Definitions
      At line 168 in file lab4.s
   Uses
      At line 194 in file lab4.s
      At line 197 in file lab4.s

check_if_done 00000092

Symbol: check_if_done
   Definitions
      At line 192 in file lab4.s
   Uses
      At line 189 in file lab4.s
      At line 204 in file lab4.s
      At line 207 in file lab4.s
      At line 212 in file lab4.s
      At line 215 in file lab4.s

compare 00000070

Symbol: compare
   Definitions



ARM Macro Assembler    Page 2 Alphabetic symbol ordering
Relocatable symbols

      At line 179 in file lab4.s
   Uses
      At line 175 in file lab4.s
Comment: compare used once
cont_sub2 0000008A

Symbol: cont_sub2
   Definitions
      At line 189 in file lab4.s
   Uses
      At line 186 in file lab4.s
Comment: cont_sub2 used once
done 00000008

Symbol: done
   Definitions
      At line 55 in file lab4.s
   Uses
      At line 55 in file lab4.s
Comment: done used once
finish 000000C4

Symbol: finish
   Definitions
      At line 217 in file lab4.s
   Uses
      At line 196 in file lab4.s
Comment: finish used once
load_sub1 00000062

Symbol: load_sub1
   Definitions
      At line 171 in file lab4.s
   Uses
      At line 168 in file lab4.s
Comment: load_sub1 used once
load_sub2 0000006C

Symbol: load_sub2
   Definitions
      At line 176 in file lab4.s
   Uses
      At line 170 in file lab4.s
      At line 173 in file lab4.s

loop 00000022

Symbol: loop
   Definitions
      At line 109 in file lab4.s
   Uses
      At line 117 in file lab4.s
Comment: loop used once
merge 0000003C

Symbol: merge
   Definitions
      At line 151 in file lab4.s
   Uses



ARM Macro Assembler    Page 3 Alphabetic symbol ordering
Relocatable symbols

      None
Comment: merge unused
no_stack_overflow 00000050

Symbol: no_stack_overflow
   Definitions
      At line 162 in file lab4.s
   Uses
      At line 157 in file lab4.s
Comment: no_stack_overflow used once
reverse_order 000000B0

Symbol: reverse_order
   Definitions
      At line 208 in file lab4.s
   Uses
      At line 200 in file lab4.s
Comment: reverse_order used once
size1 00000014

Symbol: size1
   Definitions
      At line 64 in file lab4.s
   Uses
      None
Comment: size1 unused
sort 00000018

Symbol: sort
   Definitions
      At line 83 in file lab4.s
   Uses
      At line 50 in file lab4.s
Comment: sort used once
string1 0000000A

Symbol: string1
   Definitions
      At line 59 in file lab4.s
   Uses
      At line 61 in file lab4.s
Comment: string1 used once
19 symbols



ARM Macro Assembler    Page 1 Alphabetic symbol ordering
Absolute symbols

RAM_START 20000000

Symbol: RAM_START
   Definitions
      At line 17 in file lab4.s
   Uses
      None
Comment: RAM_START unused
end_of_stack 20001000

Symbol: end_of_stack
   Definitions
      At line 16 in file lab4.s
   Uses
      At line 154 in file lab4.s
Comment: end_of_stack used once
string1size 0000000A

Symbol: string1size
   Definitions
      At line 61 in file lab4.s
   Uses
      At line 65 in file lab4.s
Comment: string1size used once
3 symbols
357 symbols in table
